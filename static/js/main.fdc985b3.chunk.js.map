{"version":3,"sources":["assets/svg/twitter.js","assets/svg/tumblr.js","Container/QuoteBox/QuoteBox.js","App.js","serviceWorker.js","index.js"],"names":["twitter","props","xmlns","width","height","viewBox","d","fill","tumblr","QuoteBox","state","randomQuote","randomAuthor","colorsPrimary","colorsSecondary","colorOne","colorTwo","randomQuoteHandler","randomizer","colorRandomizer","axios","get","then","result","len","data","quotes","length","random","Math","floor","setState","quote","author","catch","error","console","log","randomOne","randomTwo","this","id","style","background","rel","href","encodeURIComponent","title","target","onClick","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fdc985b3.chunk.js","sourcesContent":["import React from 'react';\n\nconst twitter= (props) => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={props.width} height={props.width} viewBox=\"0 0 24 24\"><path d=\"M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-.139 9.237c.209 4.617-3.234 9.765-9.33 9.765-1.854 0-3.579-.543-5.032-1.475 1.742.205 3.48-.278 4.86-1.359-1.437-.027-2.649-.976-3.066-2.28.515.098 1.021.069 1.482-.056-1.579-.317-2.668-1.739-2.633-3.26.442.246.949.394 1.486.411-1.461-.977-1.875-2.907-1.016-4.383 1.619 1.986 4.038 3.293 6.766 3.43-.479-2.053 1.08-4.03 3.199-4.03.943 0 1.797.398 2.395 1.037.748-.147 1.451-.42 2.086-.796-.246.767-.766 1.41-1.443 1.816.664-.08 1.297-.256 1.885-.517-.439.656-.996 1.234-1.639 1.697z\" fill={props.fill} /></svg>\n    );\n}\n\nexport default twitter;\n\n\n\n","import React from 'react';\n\nconst tumblr= (props) => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={props.width} height={props.width} viewBox=\"0 0 24 24\"><path d=\"M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-1.105 18.739c-.524.691-2.29 1.261-3.889 1.261-3.979 0-6.006-1.466-6.006-4.573v-4.104h-1.933l-.067-.067v-3.16l.045-.064.178-.059c1.597-.534 2.624-1.432 2.851-3.284.055-.447.431-.689.757-.689h4.767l.066.067v3.211l.066.067h2.535l.068.067v3.844l-.068.067h-2.545l-.067.067v3.81c.002.103.006.414.109.414h2.182l.064.046.992 2.941-.105.138zm-1.309-2.278l.664 1.967-.016.07c-.5.48-1.703.837-2.686.854l-.111.001c-3.232 0-3.788-2.468-3.788-3.926v-4.692l-.066-.067h-1.854l-.067-.067-.016-2.041.042-.062c1.67-.65 2.604-1.73 2.849-3.729.014-.111.105-.114.106-.114h2.298l.067.067v3.211l.068.067h2.535l.066.067v2.534l-.066.067h-2.547l-.064.067v4.47c.016.959.477 1.445 1.377 1.445.362 0 .744-.084 1.123-.229l.086.04z\" fill={props.fill} /></svg>\n    );\n}\n\nexport default tumblr;\n\n","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport './QuoteBox.css';\nimport Twitter from '../../assets/svg/twitter';\nimport Tumblr from '../../assets/svg/tumblr';\n \nclass QuoteBox extends Component {\n    state = {\n        randomQuote: '',\n        randomAuthor: '',\n        colorsPrimary: ['purple', 'indigo', '#9966ff', 'green', 'lime', 'Fuchsia'],\n        colorsSecondary: ['#99ff99', 'pink', 'blue', 'cyan', 'teal', 'yellow', 'orangered'],\n        colorOne: '',\n        colorTwo: '',\n    }\n componentDidMount() {\n    this.randomizer();\n    this.colorRandomizer();\n }\n\n randomQuoteHandler = () => {\n    this.randomizer();\n    this.colorRandomizer();\n }\n\n randomizer = () => {\n    // let random = Math.floor(Math.random() * this.state.list.length);\n\n    // this.setState({randomQuote: this.state.list[random].quote, randomAuthor: this.state.list[random].author});\n    axios.get('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\n    .then(result => {\n        const len = result.data.quotes.length;\n        let random = Math.floor(Math.random() * len);\n\n        this.setState({randomQuote: result.data.quotes[random].quote, \n            randomAuthor: result.data.quotes[random].author});\n    })\n    .catch(error => {\n        console.log(error);\n    })\n }\n\n colorRandomizer = () => {\n    let randomOne = Math.floor(Math.random() * this.state.colorsPrimary.length);\n    let randomTwo = Math.floor(Math.random() * this.state.colorsSecondary.length);\n\n    this.setState({colorOne: this.state.colorsPrimary[randomOne], colorTwo: this.state.colorsSecondary[randomTwo]});\n }\n    \n    render() {\n        return (\n            <div id=\"quote-box\" style={{background: `linear-gradient(20deg, ${this.state.colorOne}, ${this.state.colorTwo})` }}>\n                <div id=\"space\">\n                    <p id=\"text\" >{this.state.randomQuote} </p>\n                    <section id=\"author\">â€“ {this.state.randomAuthor}</section>\n                </div>\n                <section id=\"lower-section\">\n                    <a rel=\"noopener noreferrer\" href={`https://twitter.com/intent/tweet?hashtags=quotes&related=&text=` + encodeURIComponent('\"' + this.state.randomQuote + '\" ' + this.state.randomAuthor)} id=\"tweet-quote\" title=\"Tweet this post\" target=\"_blank\"><Twitter fill={this.state.colorTwo} width={'2.5rem'} id=\"twitter\" /></a>\n                    <a rel=\"noopener noreferrer\" href={`https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes&caption=` + encodeURIComponent(this.state.randomAuthor) +'&content= ' + encodeURIComponent(this.state.randomQuote)+'&canonicalUrl=https%3A%2F%2Fwww.tumblr.com%2Fbuttons&shareSource=tumblr_share_button'} title=\"Post on Tumblr\" target=\"_blank\"><Tumblr fill={this.state.colorTwo} width={'2.5rem'} id=\"tumblr\" /></a>\n                    <button id=\"new-quote\" onClick={this.randomQuoteHandler} style={{background: `linear-gradient(20deg, ${this.state.colorOne}, ${this.state.colorTwo})` }} >New Quote</button>\n                </section>\n            </div>\n        );\n    }\n}\n\nexport default QuoteBox;","import React, {Component} from 'react';\nimport QuoteBox from './Container/QuoteBox/QuoteBox';\n\nimport './App.css';\n\nclass App extends Component {\n render () {\n  return (\n    <div className=\"App\">\n      <QuoteBox />\n    </div>\n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}